// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(cuid())
  fullName       String
  username       String  @unique
  email          String  @unique
  emailVerified  Boolean @default(false)
  password       String
  biography      String?
  profilePicture String?

  images           Image[]
  posts            Post[]
  comments         Comment[]
  commentReactions CommentReaction[]
  postReactions    PostReaction[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ActivateToken ActivateToken[]

  @@map("users")
}

model Image {
  id      String  @id @default(cuid())
  url     String
  userId  String
  filter  String?
  deleted Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images")
}

model Post {
  id       String @id @default(cuid())
  subtitle String
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageId  String
  image    Image  @relation(fields: [imageId], references: [id])

  comments      Comment[]
  postReactions PostReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model ActivateToken {
  id          String    @id @default(cuid())
  token       String    @unique
  userId      String
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("activate_tokens")
}

model Comment {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentReactions CommentReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model CommentReaction {
  id        String  @id @default(cuid())
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment_reactions")
}

model PostReaction {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  type   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("post_reactions")
}
